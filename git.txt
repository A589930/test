GIT : IT is distributed version control system
 
GIt : opensource tool/ software used for version controlling
github: version control service
bitbucket & gitlab are same as github they provide service to GIT
github is not free while bitbucket is free
service of github is good as compare to bitcucket, github is purcased by Microsoft

after creating any folder on right click we get 2 option
1) GIT GUI
2) GIT BASH

git GUI uses GIT BASh in background

1) for getting the version of git
git --version
git version 2.18.0.windows.1


create any new folder --> go inside that folder --> right click git bash --> git init --> the newly create folder will behave like 
a new repository

git init
//initlizes a empty git repository in folder 

git bash works like linux commands.
Git supports 3 layer architecture
1) working area
2) staging area
3) commit area


for checkig the logged in user email and name
git config user.email
git config user.name


for adding to staging area:
git add .

if you want to remove from staging area then use command
gir reset filename

by mistakely you have added a change in file and not added that file to staging area then for removing that change from file use:
git checkout filename  // in this way we will go to our last commit state

for commiting the change:
git commit -m "messge for commit"

for pushing to git
git push -u origin  master

for pulling the data from github to local:
git pull origin master

Git add -A : stages ALL
git add . : stages new and modified , WITHOUT DELETED
git add -u : stages modified and deleted , WITHOUT NEW

For cloning any other repository into you local:
create a new folder , right click , git bash here 
git clone git@github.com:A589930/test.git  
a new folder will be created inside your folder


if you dont want to create new folder and just want script should be directly visible the
git clone git@github.com:A589930/test.git  .



for seeing the origin added:
$ git remote -v
origin  git@github.com:A589930/test.git (fetch)
origin  git@github.com:A589930/test.git (push)

for removing the origin added
git remote rm origin
// here origin we have taken from output of above commands

git status
in git status command if you can see there is some delta between local file and git hub file then you can compare the change by following 
command:
git diff filename.txt

you have done change in one file and added that to stage and want to see the difference between staged and github file
git diff --staged filename.txt


.gitignore

if want any file not to push / pull / track then we can create a .gitignore file in you folder and add that files name in .gitignore file

git branch  NewBranch
// for creating new branch

git checkout  NewBranch // for switching to NewBranch
git checkout master // for going back to master branch
git merge NewBranch   // for merging content of NewBrnach into master Branch



git branch
// it will tell you, u are working with which branch


git branch new-branch
// will create a new branch 

git checkout new-branch
// it will switch you to new-branch

git push -u origin new-branch
// this will push the data to new-branch

for merging the data of new-branch to master do:
git checkout master // this will set your branch to master
git merge new-branch // this will merge the data of new-branch to master


git branch -d new-branch  // it will delete branch but deleted branch will not be visible only in CLI that will be present in GUI i. e. website

git push origin --delete new-branch // it will delete the branch from website as well

===========================
1) difference between working directory files and staging area files
git diff

2) to see the difference between working directory and git repository
git difftool HEAD


3) to see the difference between stagging area and git repository
git diff --staged HEAD

OR

git difftool --staged HEAD

4)limit the comparision to only one files ( between working directory and staging area)
git diff -- readme.md
git difftool -- readme.md


5) git diff HEAD^ HEAD
this will give comparision between last commit -1 and last commit

6) git diff efa4244 HEAD
will give comparision between efa4244 commit and current commit

7) compare the difference between local master branch and origin master branch
git diff master origin/master


8) show all the branches
git branch -a

9) create a new branch
git branch new

10) to go to newly created branch
git checkout new

11) delete a branch 
git branch -d new

12) how to check currently you are at which branch
git branch

13) how to create and checkout new branch at a time 
git checkout -b newb

14) how to merge the content of newb branch to master branch (cu you are at master branch)
git merge newb

if you want to go to previous checkout state 
git checkout 5b8d8541d6f10a2f7f29c24615a5e0f0e5b4abd9

================
if you want to go to previous checkout state 
git checkout 5b8d8541d6f10a2f7f29c24615a5e0f0e5b4abd9
where 5b8d8541d6f10a2f7f29c24615a5e0f0e5b4abd9 is commit id which can be get from git log command

git checkout master // to go back to latest commit state


GIt Revert :
The git revert command can be considered an 'undo' type command, however, it is not a traditional undo operation. Instead of removing the commit from the project history, it figures out how to invert the changes introduced by the commit and appends a new commit with the resulting inverse content. This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration.

Reverting should be used when you want to apply the inverse of a commit from your project history

$ git log
commit c0297e2694c5fed5db72af0e000391f771c652bc (HEAD)
Author: vijay bhalekar <bhalekarvijay5@gmail.com>
Date:   Mon Jun 22 15:17:44 2020 +0530

    added c

commit a84148f784f8779190fb0f8bd398b1aafd0c37e4
Author: vijay bhalekar <bhalekarvijay5@gmail.com>
Date:   Mon Jun 22 15:17:30 2020 +0530

    added b

commit 5b8d8541d6f10a2f7f29c24615a5e0f0e5b4abd9
Author: vijay bhalekar <bhalekarvijay5@gmail.com>
Date:   Mon Jun 22 15:17:12 2020 +0530

    added a

git revert a84148f784f8779190fb0f8bd398b1aafd0c37e4
by this command only the content which has been added in 'a84148f784f8779190fb0f8bd398b1aafd0c37e4' this commit , will remove.
===============
while working on one branch if you want to switch to another branch by saving current branch work then use git stash
git stash save "<save message>" // it will save you recently done work to stash point
git stash list // you can view your stash point here
git stash pop // you can come back to your stash point by this 

after doing git stash save command all recently done changes will disappear
for using stashing feature you data should be in unstgged state or stagged state only 
if your changes are already in commited state then you will not be able to use stashing feature

==================
how to undo a local commit

git reset --soft HEAD^     # Use --soft if you want to keep your changes
git reset --hard HEAD^     # Use --hard if you don't care about keeping the changes you made
