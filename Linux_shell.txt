
count no of lines in file : wc -l filename
count no of words in file : wc -w filename

ls = echo *  // both are same

Sticky BIT 
https://www.thegeekstuff.com/2013/02/sticky-bit/
linuxnix.com/sticky-bit-set-linux/


mtime : ls -l : show the last update to file content, it does not udpate with change in permission or owner
atime : ls -lu : shows the last file accessed time 
ctime : ls -lc : it changes when u change the files ownership or access permission .

file creation time : 
1) find files inode number by following command :
ls -i file.txt
2)find partition name on which your filesystem is residing by df -hk command
df -hk  (for example /dev/sda1)
3) debugfs -R 'stat <inode number>' /dev/sda1
===================

lsof -i:8080  // which process is using port 8080

how to redirect error and output to logfile 


bash file.txt 2> logfile.txt
2 for error

Top command parameter in detail


==============


date -s "27 AUGUST 2018 15:44:00"  // set date 
set cron every 10 minutes : */10 * * * * command
at 11 Am nad 4 PM : 		00 11,16 * * * command 
from 9 AM to 6 PM : 		00 09-18 * * *
from 9 AM to 6 PM ( weekdays only)		: 00 09-18 * * 1-5
means every 2 minuts in first  10 minutes : 0-10/2 * * * *
@yearly  : 0 0 1 1 *
@daily   : 0 0 * * *
@hourly  : 0 * * * *
@reboot  runs at startup

write a shell script to monitor disk space usage :
{
df -hk | grep tmp > /tmp/vij/s
var=`cat /tmp/vij/s | awk '{ print $5 }'`
var1=`echo"${var::-1}"`
echo $var1
}  // this script is not completed still

remove blank line from file
cat filename | grep -v "^$" > temp_file

[ram2@atrcxb2957 t]$ cat t  //create 50 users 
#!/bin/bash

for i in ` cat ./a`; do
useradd $i;
done

[ram2@atrcxb2957 t]$ cat tt  // set password for 50 users
#!/bin/bash

for i in `cat ./a` ; do
echo "ram" | passwd --stdin $i; done
====================================
// script to perform passwordless ssh from 1 linux server to another
#!/bin/bash
username=<username>
server=<Server_IP/Server_Hostname>

ssh-keygen -t rsa 
if [ $? -ne 0 ]; then 
echo "Could not generate the Key"
exit
fi

ssh-copy-id  -i ~/.ssh/id_rsa.pub  $username@$server
if [ $? -ne 0 ]; then 
echo "Could not copy public id from client to server"
exit
fi
echo "Passwordless SSH configured successfully"


=====================================

create a file with some content with the help of cat command.
cat > hello
enter the content followd by CTRL + D

[root@system1 ~]# date -u
Sat Mar 23 17:39:05 UTC 2019
[root@system1 ~]# date -s "Sat Mar 23 23:08:08"
Sat Mar 23 23:08:08 IST 2019
[root@system1 ~]#  date +"%T"
23:10:46
[root@system1 ~]# date +%B
March
[root@system1 ~]# date +%d
23
[root@system1 ~]# date +%D
03/23/19
[root@system1 ~]# date +%b
Mar
[root@system1 ~]# date +%y
19
[root@system1 ~]# date +%Y
2019
[root@system1 ~]# date +%F
2019-03-23
[root@system1 ~]# date +%f
%f


1> redirects stdout to filename 
1>> appends stdout to filename
2> redirects stderr to filename
&> redirects both stderr and stdout to a filename


ls ? will show all the files with single character as name
ls ??? will show all the files with three characters as name

[root@system1 ~]# ls a[a-d]c
aac  abc  acc  adc

[root@system1 ~]# ls *[0-9]* // it will display all the files whose name contains at least 1 digit

ls test_[!9]*  // it will print all the files except test_9
if want to create a file with special character in their name then can use "\"

touch \\
touch \$
touch hello\ there
[root@system1 test]# ls
$  \  hello there
touch hello\\\ there
[root@system1 test]# ls
hello\ there


===============================

find command:
for ignoring the case 
find . -iname abc.txt

find all files in current working directory whose name is not abc.txt
find . -not -iname abc.txt

find all files with .cpp or .sh extension

find . -name "*.cpp"  -o -name "*.sh"

find file with extension as .sh and its name contain "track" word
find . -name "*.sh" -a -name "*track*"

find all the files whose name contain "abc" but extension is not .php
find . -name "*abc*" ! -name "*.php"

how to find a file in 2 paths
find / /eniq -type f -name abc.txt

how to find hidden files
find . -name ".*" -type f

find a file whose permision is not 777

find . -type f ! -perm 777

find files for which stiky bit is set
find / -type f -perm /u=s

find all files in which read permission is set to user
find . -type f -perm /u=r

find all  the files owned by john
find /home -user john -type f

find all files modified in last 10 days
find . -type f -mtime 10

find all files accessed in last 10 days
find . -type f -atime 10

find all files which are modified in last 10 to 100 days (files which are modified in last 9 days should be excluded)
find . -type f -mtime +10 -mtime -100

find all files modified in last 10th minute
find . -type f -mmin 10

find all files modifies in last 10 minutes
find . -type f -mmin -10

find all files modified in past but not in last 10 minutes
find . -type  f -mmin +10

for minutes we use word mmin amin cmin
find all files whose size is 50MB
find . -type f -size 50M

find files size between 50 to 100 MB
find . -type f -size +50M -size -100M

find empty files
find . -type f -empty
find . -type f -size 0

find file with name abc.txt and delete that files
find . -type f -name "abc.txt" -exec rm -rf {} \;

find . -type f -name "abc.txt"  | xargs ls -l {} \;

while finding if you want to search the file only upto 2 directories 
find . -maxdepth 2 -name abc.txt

Top command 
https://www.howtogeek.com/668986/how-to-use-the-linux-top-command-and-understand-its-output/

Grep :
variants of grep 
egrep : extended grep for regular expression
fgrep : fixed strings
rgrep : reversed grep

find vijay word in all files recursively
grep -r "vijay" *

show all the data in file except vijay in file
grep -riv "vijay" *
r: recursively
i: ignore case
v: excluded

count the "vijay" word in file
grep -c "vijay" filename.txt

find "vijay" and "rahul" in file.txt
find -E -w "vijay|rahul" file.txt

find exact word "vijay" in file (not vijaya or avijay)
find -iw "vijay" file.txt

find just file name which contain "vijay" word
grep -l "vijay" * | sort |  uniq

find vijay , ajay word in file
grep [via]jay file.txt 
it will search for every combination of "via" followd by "jay" i. e. vjay, ijay, ajay, viajay , vijay , iajay

find 4 digit pattern in file
grep "[0-9][0-9][0-9][0-9]" file.txt

show 3 more lines after "vijay"
grep -A 3 "vijay" file.txt

show 3 lines before "vijay"
grep -B 3 "vijay" file.txt 

grep -f user.txt /etc/passwd
it will iterate through user.txt and for every word it will search the /etc/passwd file and display the matched pattern
  
different ways of array declaration
1)
var[0]="Hello"
var[1]="vijay"
var[2]="dear"

2)
var=("The"  "rate" "is" 45 "kg")

3) 
var=([0]="hello" [1]="vijay" dear)

4)
echo "enter Ip addressed seperated by space"
read -a ip_list // with -a option we are accepting the input and saving in array

for i in ${ip_list[@]}
do
	echo $i
done


"here document" concept
we can give multiline comment in code with here document concept

echo "this will print"

<< COMMENT

echo "this will not print"
touch filename   // this will not execute
echp " again this will not execute"

COMMENT

echo "this will also print"
here we can use any word instead of COMMENT ,the end word should be at the begining of the line


perform copy operation with dd command
dd if=/tmp/test.sh  of=/var/tmp/new_test.sh bs=10240


cat /proc/cpuinfo is same lscpu


1) what is difference between softlink and hardlink

A symbolic or soft link is an actual link to the original file, whereas a hard link is a mirror copy of the original file. If you delete the original file, the soft link has no value, because it points to a non-existent file. But in the case of hard link, it is entirely opposite. Even if you delete the original file, the hard link will still has the data of the original file. Because hard link acts as a mirror copy of the original file.

In a nutshell, a soft link

can cross the file system,
allows you to link between directories,
has different inode number and file permissions than original file,
permissions will not be updated,
has only the path of the original file, not the contents.
A hard Link

can’t cross the file system boundaries (i.e. A hardlink can only work on the same filesystem),
can’t link directories,
has the same inode number and permissions of original file,
permissions will be updated if we change the permissions of source file,
has the actual contents of original file, so that you still can view the contents, even if the original file moved or removed.

==========================
FOR Loop

        #!/bin/bash
        for i in `seq 1 10`;
        do
                echo $i
        done    
        
While sample
         #!/bin/bash 
         COUNTER=0
         while [  $COUNTER -lt 10 ]; do
             echo The counter is $COUNTER
             let COUNTER=COUNTER+1 
         done
         

Until sample
         #!/bin/bash 
         COUNTER=20
         until [  $COUNTER -lt 10 ]; do
             echo COUNTER $COUNTER
             let COUNTER-=1
         done
	
==========================
[ -a FILE ]	True if FILE exists.
[ -b FILE ]	True if FILE exists and is a block-special file.
[ -c FILE ]	True if FILE exists and is a character-special file.
[ -d FILE ]	True if FILE exists and is a directory.
[ -e FILE ]	True if FILE exists.
[ -f FILE ]	True if FILE exists and is a regular file.
[ -g FILE ]	True if FILE exists and its SGID bit is set.
[ -h FILE ]	True if FILE exists and is a symbolic link.
[ -k FILE ]	True if FILE exists and its sticky bit is set.
[ -p FILE ]	True if FILE exists and is a named pipe (FIFO).
[ -r FILE ]	True if FILE exists and is readable.
[ -s FILE ]	True if FILE exists and has a size greater than zero.
[ -u FILE ]	True if FILE exists and its SUID (set user ID) bit is set.
[ -w FILE ]	True if FILE exists and is writable.
[ -x FILE ]	True if FILE exists and is executable.
[ -O FILE ]	True if FILE exists and is owned by the effective user ID.
[ -G FILE ]	True if FILE exists and is owned by the effective group ID.
[ -L FILE ]	True if FILE exists and is a symbolic link.
[ -z STRING ]	True of the length if "STRING" is zero.
[ -n STRING ] or [ STRING ]	True if the length of "STRING" is non-zero.
=================================

1	
$0: The filename of the current script.

2	
$n:These variables correspond to the arguments with which a script was invoked. Here n is a positive decimal number corresponding to the position of an argument (the first argument is $1, the second argument is $2, and so on).

3	
$#: The number of arguments supplied to a script.

4	
$*: All the arguments are double quoted. If a script receives two arguments, $* is equivalent to $1 $2.
test.sh vijay ajay
"vijay ajay"

5	
$@: All the arguments are individually double quoted. If a script receives two arguments, $@ is equivalent to $1 $2.
test.sh vijay ajay
"vijay" "ajay"


6	
$?: The exit status of the last command executed.

7	
$$: The process number of the current shell. For shell scripts, this is the process ID under which they are executing.

8	
$!: The process number of the last background command.

===========================

basic for loop 
for i in `ls /etc/rc.*`; do
  echo $i
done


C-like for loop
for ((i = 0 ; i < 100 ; i++)); do
  echo $i
done

Ranges
for i in {1..5}; do
    echo "Welcome $i"
done

With step size
for i in {5..50..5}; do
    echo "Welcome $i"
done

cat file.txt | while read line; do
  echo $line
done

while true; do
  ···
done


defining functions
myfunc() {
    echo "hello $1"
}
# Same as above (alternate syntax)
function myfunc() {
    echo "hello $1"
}
myfunc "John"

returning values
myfunc() {
    local myresult='some value'
    echo $myresult
}
result="$(myfunc)"

Fruits=('Apple' 'Banana' 'Orange') // define array

// define array
Fruits[0]="Apple"
Fruits[1]="Banana"
Fruits[2]="Orange"

lines=(`cat logfile`)   // create array by reading from file


echo ${Fruits[0]}          Apple # Element #0
echo ${Fruits[-1]}         Orange # Last element
echo ${Fruits[@]}          Apple Banana Orange # All elements, space-separated
echo ${#Fruits[@]}         3 # Number of elements
echo ${#Fruits}            5 # String length of the 1st element
echo ${#Fruits[3]}         6 # String length of the Nth element

for i in "${arrayName[@]}"; do
  echo $i
done


dictionary in bash
declare -A sounds  // sounds is declared as associative array (two types of array associative and indexed array)

sounds[dog]="bark"
sounds[cow]="moo"
sounds[bird]="tweet"
sounds[wolf]="howl"

echo ${sounds[dog]} # Dog's sound
echo ${sounds[@]}   # All values
echo ${!sounds[@]}  # All keys
echo ${#sounds[@]}  # Number of elements
unset sounds[dog]   # Delete dog



Mention some ways to perform arithmetic operations in bash?

var1=$( expr 120 - 100 )
# print the result
echo $var1
# Calculate the addition by using let command
let var2=200+300
# Print the rsult
echo $var2
# Calculate and print the value of division using ‘bc’ to get the result
# with fractional value
echo "scale=2; 44/7" | bc
# Calculate the value of multiplication using double brackets
var3=$(( 5*3 ))
# Print the result
echo $var3



What is IFS?
IFS is a special shell variable. The full form of IFS is Internal Field Separator,
it acts as delimiter to separate the word from the line of text. It is mainly used for splitting a string, reading a command, replacing text etc.

Example:

#!/bin/bash
# Declare ':' as delimiter for splitting the text
IFS=":"
# Assign text data with ':' to $text
text="Red:Green:Blue"
for val in $text; do
    echo $val
done


How to find out the length of a string data? 

# Count length using `expr` length option
echo `expr length "I like PHP"`
# Count length using `wc` command
echo "I like Bash" | wc -c
# Count length using `awk` command
echo "I like Python" | awk '{print length}'

https://www.slashroot.in/suid-and-sgid-linux-explained-examples  // sticky bit , SUID and SGID

===========================

print specific portion of logfile based on date 

Feb 23 13:55:01 messagerie postfix/smtpd[20964]: connect from localhost[127.0.0.1]
Feb 23 13:55:02 messagerie postfix/smtpd[20964]: lost connection after CONNECT from localhost[127.0.0.1]
Feb 23 13:55:03 messagerie postfix/smtpd[20964]: disconnect from localhost[127.0.0.1]
Feb 23 13:55:04 messagerie pop3d: Connection, ip=[::ffff:127.0.0.1]
Feb 23 13:56:01 messagerie postfix/smtpd[20964]: connect from localhost[127.0.0.1]
Feb 23 13:56:01 messagerie postfix/smtpd[20964]: lost connection after CONNECT from localhost[127.0.0.1]
Feb 23 13:56:01 messagerie postfix/smtpd[20964]: disconnect from localhost[127.0.0.1]
Feb 23 13:57:01 messagerie pop3d: Connection, ip=[::ffff:127.0.0.1]
Feb 23 13:57:01 messagerie postfix/smtpd[20964]: connect from localhost[127.0.0.1]
Feb 23 13:57:01 messagerie postfix/smtpd[20964]: lost connection after CONNECT from localhost[127.0.0.1]
Feb 23 13:58:01 messagerie postfix/smtpd[20964]: disconnect from localhost[127.0.0.1]
Feb 23 13:58:01 messagerie pop3d: Connection, ip=[::ffff:127.0.0.1]


print every line it finds between the string Feb 23 13:56 and the string Feb 23 13:58

O/P:
way 1) 

 sed -n '/Feb 23 13.56/, /Feb 23 13.58/p' test_new.txt
 
Feb 23 13:56:01 messagerie postfix/smtpd[20964]: connect from localhost[127.0.0.1]
Feb 23 13:56:01 messagerie postfix/smtpd[20964]: lost connection after CONNECT from localhost[127.0.0.1]
Feb 23 13:56:01 messagerie postfix/smtpd[20964]: disconnect from localhost[127.0.0.1]
Feb 23 13:57:01 messagerie pop3d: Connection, ip=[::ffff:127.0.0.1]
Feb 23 13:57:01 messagerie postfix/smtpd[20964]: connect from localhost[127.0.0.1]
Feb 23 13:57:01 messagerie postfix/smtpd[20964]: lost connection after CONNECT from localhost[127.0.0.1]
Feb 23 13:58:01 messagerie postfix/smtpd[20964]: disconnect from localhost[127.0.0.1]

way 2)
 
 grep "Feb 23 13:5[6-8]" test_new.txt
Feb 23 13:56:01 messagerie postfix/smtpd[20964]: connect from localhost[127.0.0.1]
Feb 23 13:56:01 messagerie postfix/smtpd[20964]: lost connection after CONNECT from localhost[127.0.0.1]
Feb 23 13:56:01 messagerie postfix/smtpd[20964]: disconnect from localhost[127.0.0.1]
Feb 23 13:57:01 messagerie pop3d: Connection, ip=[::ffff:127.0.0.1]
Feb 23 13:57:01 messagerie postfix/smtpd[20964]: connect from localhost[127.0.0.1]
Feb 23 13:57:01 messagerie postfix/smtpd[20964]: lost connection after CONNECT from localhost[127.0.0.1]
Feb 23 13:58:01 messagerie postfix/smtpd[20964]: disconnect from localhost[127.0.0.1]
Feb 23 13:58:01 messagerie pop3d: Connection, ip=[::ffff:127.0.0.1]

==========================

#!/bin/bash

echo "Hello, who are you?"

read $REPLY

echo "Can I ask you some questions?"

read $REPLY

echo "What is your favorite topic?"

read $REPLY


another script:

#!/usr/bin/expect -f

set timeout -1

spawn ./questions

expect "Hello, who are you?\r"

send -- "Im Adam\r"

expect "Can I ask you some questions?\r"

send -- "Sure\r"

expect "What is your favorite topic?\r"

send -- "Technology\r"

expect eof

On the second line of code, we disable the timeout. Then start our script using spawn command.

We can use spawn to run any program we want or any other interactive script.

The remaining lines are the Expect script that interacts with our shell script.

The last line means the end of the interaction.

Now Showtime, let’s run our answer bot and make sure you make it executable.
===============

how to read a file using while :

while read line;do
echo $line
done < t

second way :
cat t | while read line;do
echo $line
done

while true; do  // infinite while loop
  ···
done

while :; do   // infinite while loop
  ...
 done
 
=================
https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys

How SSH works

To authenticate using SSH keys, a user must have an SSH key pair on their local computer. On the remote server, the public key must be copied to a file within the user’s home directory at ~/.ssh/authorized_keys. This file contains a list of public keys, one-per-line, that are authorized to log into this account.

When a client connects to the host, wishing to use SSH key authentication, it will inform the server of this intent and will tell the server which public key to use. The server then check its authorized_keys file for the public key, generate a random string and encrypts it using the public key. This encrypted message can only be decrypted with the associated private key. The server will send this encrypted message to the client to test whether they actually have the associated private key.

Upon receipt of this message, the client will decrypt it using the private key and combine the random string that is revealed with a previously negotiated session ID. It then generates an MD5 hash of this value and transmits it back to the server. The server already had the original message and the session ID, so it can compare an MD5 hash generated by those values and determine that the client must have the private key.

Generating an SSH Key Pair
Generating a new SSH public and private key pair on your local computer is the first step towards authenticating with a remote server without a password. Unless there is a good reason not to, you should always authenticate using SSH keys.

A number of cryptographic algorithms can be used to generate SSH keys, including RSA, DSA, and ECDSA. RSA keys are generally preferred and are the default key type.

To generate an RSA key pair on your local computer, type:

ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/demo/.ssh/id_rsa):
This prompt allows you to choose the location to store your RSA private key. Press ENTER to leave this as the default, which will store them in the .ssh hidden directory in your user’s home directory. Leaving the default location selected will allow your SSH client to find the keys automatically.

Enter passphrase (empty for no passphrase):
Enter same passphrase again:
The next prompt allows you to enter a passphrase of an arbitrary length to secure your private key. By default, you will have to enter any passphrase you set here every time you use the private key, as an additional security measure. Feel free to press ENTER to leave this blank if you do not want a passphrase. Keep in mind though that this will allow anyone who gains control of your private key to login to your servers.

If you choose to enter a passphrase, nothing will be displayed as you type. This is a security precaution.

Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
8c:e9:7c:fa:bf:c4:e5:9c:c9:b8:60:1f:fe:1c:d3:8a root@here
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|                 |
|                 |
|       +         |
|      o S   .    |
|     o   . * +   |
|      o + = O .  |
|       + = = +   |
|      ....Eo+    |
+-----------------+
This procedure has generated an RSA SSH key pair, located in the .ssh hidden directory within your user’s home directory. These files are:

~/.ssh/id_rsa: The private key. DO NOT SHARE THIS FILE!
~/.ssh/id_rsa.pub: The associated public key. This can be shared freely without consequence.

Copying your Public SSH Key to a Server with SSH-Copy-ID
To copy your public key to a server, allowing you to authenticate without a password, a number of approaches can be taken.

If you currently have password-based SSH access configured to your server, and you have the ssh-copy-id utility installed, this is a simple process. The ssh-copy-id tool is included in many Linux distributions’ OpenSSH packages, so it very likely may be installed by default.

If you have this option, you can easily transfer your public key by typing:

ssh-copy-id username@remote_host
This will prompt you for the user account’s password on the remote system:

The authenticity of host '111.111.11.111 (111.111.11.111)' can't be established.
ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe.
Are you sure you want to continue connecting (yes/no)? yes
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
demo@111.111.11.111's password:
After typing in the password, the contents of your ~/.ssh/id_rsa.pub key will be appended to the end of the user account’s ~/.ssh/authorized_keys file:

Number of key(s) added: 1

Now try logging into the machine, with:   "ssh 'demo@111.111.11.111'"
and check to make sure that only the key(s) you wanted were added.
You can now log into that account without a password:

ssh username@remote_host
Copying your Public SSH Key to a Server Without SSH-Copy-ID
If you do not have the ssh-copy-id utility available, but still have password-based SSH access to the remote server, you can copy the contents of your public key in a different way.

You can output the contents of the key and pipe it into the ssh command. On the remote side, you can ensure that the ~/.ssh directory exists, and then append the piped contents into the ~/.ssh/authorized_keys file:

cat ~/.ssh/id_rsa.pub | ssh username@remote_host "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"
You will be asked to supply the password for the remote account:

The authenticity of host '111.111.11.111 (111.111.11.111)' can't be established.
ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe.
Are you sure you want to continue connecting (yes/no)? yes
demo@111.111.11.111's password:
After entering the password, your key will be copied, allowing you to log in without a password:

ssh username@remote_IP_host
Copying your Public SSH Key to a Server Manually
If you do not have password-based SSH access available, you will have to add your public key to the remote server manually.

On your local machine, you can find the contents of your public key file by typing:

cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCqql6MzstZYh1TmWWv11q5O3pISj2ZFl9HgH1JLknLLx44+tXfJ7mIrKNxOOwxIxvcBF8PXSYvobFYEZjGIVCEAjrUzLiIxbyCoxVyle7Q+bqgZ8SeeM8wzytsY+dVGcBxF6N4JS+zVk5eMcV385gG3Y6ON3EG112n6d+SMXY0OEBIcO6x+PnUSGHrSgpBgX7Ks1r7xqFa7heJLLt2wWwkARptX7udSq05paBhcpB0pHtA1Rfz3K2B+ZVIpSDfki9UVKzT8JUmwW6NNzSgxUfQHGwnW7kj4jp4AT0VZk3ADw497M2G/12N0PPB5CnhHf7ovgy6nL1ikrygTKRFmNZISvAcywB9GVqNAVE+ZHDSCuURNsAInVzgYo9xgJDW8wUw2o8U77+xiFxgI5QSZX3Iq7YLMgeksaO4rBJEa54k8m5wEiEE1nUhLuJ0X/vh2xPff6SQ1BL/zkOhvJCACK6Vb15mDOeCSq54Cr7kvS46itMosi/uS66+PujOO+xt/2FWYepz6ZlN70bRly57Q06J+ZJoc9FfBCbCyYH7U/ASsmY095ywPsBo1XQ9PqhnN1/YOorJ068foQDNVpm146mUpILVxmq41Cj55YKHEazXGsdBIbXWhcrRf4G2fJLRcGUr9q8/lERo9oxRm5JFX6TCmj6kmiFqv+Ow9gI0x8GvaQ== demo@test
You can copy this value, and manually paste it into the appropriate location on the remote server. You will have to log into the remote server through other means (like the DigitalOcean web console).

On the remote server, create the ~/.ssh directory if it does not already exist:

mkdir -p ~/.ssh
Afterwards, you can create or append the ~/.ssh/authorized_keys file by typing:

echo public_key_string >> ~/.ssh/authorized_keys
You should now be able to log into the remote server without a password.


Server-Side Configuration Options
This section contains some common server-side configuration options that can shape the way that your server responds and what types of connections are allowed.

Disabling Password Authentication
If you have SSH keys configured, tested, and working properly, it is probably a good idea to disable password authentication. This will prevent any user from signing in with SSH using a password.

To do this, connect to your remote server and open the /etc/ssh/sshd_config file with root or sudo privileges:

sudo nano /etc/ssh/sshd_config
Inside of the file, search for the PasswordAuthentication directive. If it is commented out, uncomment it. Set it to “no” to disable password logins:

PasswordAuthentication no
After you have made the change, save and close the file. To implement the changes, you should restart the SSH service.

On Ubuntu/Debian:

sudo service ssh restart
On CentOS/Fedora:

sudo service sshd restart
Now, all accounts on the system will be unable to login with SSH using passwords.

Changing the Port that the SSH Daemon Runs On
Some administrators suggest that you change the default port that SSH runs on. This can help decrease the number of authentication attempts your server is subjected to from automated bots.

To change the port that the SSH daemon listens on, you will have to log into your remote server. Open the sshd_config file on the remote system with root privileges, either by logging in with that user or by using sudo:

sudo nano /etc/ssh/sshd_config
Once you are inside, you can change the port that SSH runs on by finding the Port 22 specification and modifying it to reflect the port you wish to use. For instance, to change the port to 4444, put this in your file:

#Port 22
Port 4444
Save and close the file when you are finished. To implement the changes, you must restart the SSH daemon.

On Ubuntu/Debian:

sudo service ssh restart
On CentOS/Fedora:

sudo service sshd restart
After the daemon restarts, you will need to authenticate by specifying the port number (demonstrated in an earlier section).

Limiting the Users Who can Connect Through SSH
To explicitly limit the user accounts who are able to login through SSH, you can take a few different approaches, each of which involve editing the SSH daemon config file.

On your remote server, open this file now with root or sudo privileges:

sudo nano /etc/ssh/sshd_config
The first method of specifying the accounts that are allowed to login is using the AllowUsers directive. Search for the AllowUsers directive in the file. If one does not exist, create it anywhere. After the directive, list the user accounts that should be allowed to login through SSH:

AllowUsers user1 user2
Save and close the file. Restart the daemon to implement your changes.

On Ubuntu/Debian:

sudo service ssh restart


Disabling Root Login
It is often advisable to completely disable root login through SSH after you have set up an SSH user account that has sudo privileges.

To do this, open the SSH daemon configuration file with root or sudo on your remote server.

sudo nano /etc/ssh/sshd_config
Inside, search for a directive called PermitRootLogin. If it is commented, uncomment it. Change the value to “no”:

PermitRootLogin no
Save and close the file. To implement your changes, restart the SSH daemon.

On Ubuntu/Debian:

sudo service ssh restart


===================
Linux Check User Password Expiration Date and Time

chage -l vijay

Sample outputs:

Last password change					: Jan 10, 2012
Password expires					: never
Password inactive					: never
Account expires						: never
Minimum number of days between password change		: 0
Maximum number of days between password change		: 99999
Number of days of warning before password expires	: 7
====================

nohup
The nohup command executes another program specified as its argument and ignores all SIGHUP (hangup) signals. SIGHUP is a signal that is sent to a process when its controlling terminal is closed.

Usually, when you run a program over SSH, if your connection drops or you log out, the session is terminated, and all the processes executed from the terminal will stop. This is where the nohup command comes handy. It ignores all hangup signals, and the process will continue to run.

command output to the nohup.out file. This file is created in the current working directory . If the user running the command doesn’t have write permissions to the working directory, the file is created in the user’s home directory.

nohup mycommand &
The output includes the shell job ID (surrounded with brackets) and process ID:

[1] 25177

If for some reason you want to terminate the process, use the kill command followed by the process ID:

kill -9 25132

============
How to bring background process to foreground

type fg to bring the last process back to foreground.

See all processes running in background 
$ jobs

If you have more than one process running in the background, do this:

$ jobs
[1]   Stopped                 vim
[2]-  Stopped                 bash
[3]+  Stopped                 vim 23
fg %3 to bring the vim 23 process back to foreground.

To start it running in the background, use bg; e.g.: bg %3
=========================
print odd rows from file in unix

awk 'NR%2 == 1' filename

================
netstat (network statistics) is a command line tool for monitoring network connections both incoming and outgoing as well as viewing routing tables, interface statistics etc.

Nslookup (stands for “Name Server Lookup”) is a useful command for getting information from DNS server. It is a network administration tool for querying the Domain Name System (DNS) to obtain domain name or IP address mapping or any other specific DNS record

=======================
what happends when we source a file ?

Sourcing a file is nothing but executing the file, more importantly making the changes of the file applicable in the current shell itself, the shell which we are working in. Usually, when we execute a command or a script, a new sub-shell is created and the script is executed in the sub-shell. Due to this, if the script or the command intends to make any change to the current shell, it will not happen. In order to make the changes applicable in the current shell itself, we "source" the file.

 Let us take an example to understand this by writing a script to change the current directory to temp.
$ cat a.sh
#!/usr/bin/bash

cd temp
Check the current directory before running the script:
$ pwd
/home/guru
Let us run the script:
$ ./a.sh
/home/guru/temp
After running the script,  the current directory is:
$ pwd
/home/guru
  As seen above, it is clear that the command is indeed executed in a sub-shell, not in the main shell itself. That is the reason why the change is effected in the sub-shell, and not in the shell from which the script is invoked. In fact, we could have also proved this by checking the process id of the shell script which should have been different from the process id of our home shell.

  To make this change permanent in our current shell is what we use the source command for:
$ source a.sh
Now, let us check the current directory after sourcing the script:
$ pwd
/home/guru/temp
      This is the meaning of sourcing of a file.

source : https://www.theunixschool.com/2012/04/what-is-sourcing-file.html

====================
What is the difference between the sourcing and executing of a file?
     
The difference between sourcing and executing a file is : executing a file does not make any changes in the current shell, if intended, whereas the sourced file makes the changes in the current shell itself.
	 
===================
difference between adding variable in export and .profile?

export makes a variable something that will be included in child process environments. It does not affect other already existing environments. In general there isn't a way to set a variable in one terminal and have it automatically appear in another terminal

Adding it to your .profile makes it so that your environment will be setup to include that new variable each time you log in though. So it's not being exported from one shell to another, but instead is instructing a new shell to include it when it sets up the initial environment.

========================
$ cat t
vijay;bhalekar;23/4;shivashram;bhandup;mumbai;here
ajay;bhalekar;23/5;shivashram;bhandup;mumbai;there
swati;bhalekar;23/6;shivashram;bhandup;mumbai;here

how to print jsut 3,4,5,6 fields from file ?

$ cut -d";" -f 3,4,5,6 t
23/4;shivashram;bhandup;mumbai
23/5;shivashram;bhandup;mumbai
23/6;shivashram;bhandup;mumbai

==============

How add 45 days to the current system date?
 date -d "+ 45 days"

In which location the sudo user commands history is logged?
All the sudo users commands history is logged in /var/log/secure
============
Umask

For example, let’s calculate how a new file or directory permission will affect because of umask.

Files: 666 - 022 = 644. According to the permission, the owner can read and execute the file. Groups and others can read the file. 
Directory: 777 - 022 = 755. This means the owner will have all read, write permission and cd to the directory. Group and others can read and list the contents of the directory and cd to the directory. 
You can also view the umask value in numeric form by executing below command.

$umask
Output:

u=rwx,g=rx,o=rx

=============
how to set cron for every sunday
00 00 * * * 0
00 00 * * * 7
00 00 * * * Sun

how to set cron for first sunday of every month
0 0 1-7 * 0 cmd
0 0 * * 0 [ `date '+%e'` -le 7 ] && cmd

cron job to run on second to last friday each month
00 00 8-31 * 5

==============

single quote and double quote meaning in unix

the single quotes will literally echo what you have between them, while the double quotes will evaluate variables between them and output the value of the variable.

a=apple      # a simple variable
arr=(apple)  # an indexed array with a single element
	

# | Expression  | Result      | Comments
---+-------------+-------------+--------------------------------------------------------------------
 1 | "$a"        | apple       | variables are expanded inside ""
 2 | '$a'        | $a          | variables are not expanded inside ''
 3 | "'$a'"      | 'apple'     | '' has no special meaning inside ""
 4 | '"$a"'      | "$a"        | "" is treated literally inside ''
 5 | '\''        | **invalid** | can not escape a ' within ''; use "'" or $'\'' (ANSI-C quoting)
 6 | "red$arocks"| red         | $arocks does not expand $a; use ${a}rocks to preserve $a
 7 | "redapple$" | redapple$   | $ followed by no variable name evaluates to $
 8 | '\"'        | \"          | \ has no special meaning inside ''
 9 | "\'"        | \'          | \' is interpreted inside "" but has no significance for '
10 | "\""        | "           | \" is interpreted inside ""
11 | "*"         | *           | glob does not work inside "" or ''
12 | "\t\n"      | \t\n        | \t and \n have no special meaning inside "" or ''; use ANSI-C quoting
13 | "`echo hi`" | hi          | `` and $() are evaluated inside ""
14 | '`echo hi`' | `echo hi`   | `` and $() are not evaluated inside ''
15 | '${arr[0]}' | ${arr[0]}   | array access not possible inside ''
16 | "${arr[0]}" | apple       | array access works inside ""
17 | $'$a\''     | $a'         | single quotes can be escaped inside ANSI-C quoting
18 | "$'\t'"     | $'\t'       | ANSI-C quoting is not interpreted inside ""
19 | '!cmd'      | !cmd        | history expansion character '!' is ignored inside ''
20 | "!cmd"      | cmd args    | expands to the most recent command matching "cmd"
21 | $'!cmd'     | !cmd        | history expansion character '!' is ignored inside ANSI-C quotes
---+-------------+-------------+--------------------------------------------------------------------

