
count no of lines in file : wc -l filename
count no of words in file : wc -w filename
file containg 100 lines print 30 to 40 number of lines : cat  filename | head -40 | tail -10
sed -n '30,40p' filename
ls = echo *  // both are same

display entire file except lines from 3 to 7 : sed '3,7d' filename
string replacement :  sed 's/version/story/g' myfile.txt
string replacement by ignoring case : sed 's/version/story/gi' myfile.txt
replace multiple spaces with single space : sed 's/ */ /g' aa      // if 2 or more than 2 consecitive spaces are there then those will be repalced with single space
replacing words only within a line range (30 through 40) : sed '30,40 s/version/story/g' myfile.txt
^#  : lines starting with comment
^$   : blank lines   
find some pattern in file :  sed -n '/this/p' file.txt
insert 1 at the start of every line : sed -i 's/^/1/' filename
insert  at the last of every line :  sed -i 's/$/6/' filename
remove cntl+M character from file : sed -i 's/\^M//g' filename
remove blank line : sed '/^$/d' file.txt
perform 2 or more substitution at once : sed -i 's/that/this/gi;s/line1/line2/gi' myfile.txt
give "()" to all capital characters in file:
sed 's/\(\b[A-Z]\)/\(\1\)/g' file.txt
Replacing string on a specific line number : sed '3 s/unix/linux/' geekfile.txt
delete line no 9 to 10 in file: sed '9,10d' file.txt
Deleting lines other than the mentioned :  sed '3,4!d' file.txt
To add a blank line after every non-blank line : sed G file.txt
Replace a string on a particular line: sed '1 s/hi/HI/' file.txt // this will replace only on first line only first occurrence
sed ' s/hi/HI/2' file.txt // this will replace every second occurance of hi on  all lines
sed '4,5 s/hi/HI/2' file.txt // this will replace every second occurance of hi on  lines between 4 to 5
To add some content after any string :  sed '/string/a "AFTER_STRING"' file.txt
to add some content before any string : sed '/string/i "BEFORE_STRING"' file.txt
multiple sed commands :  sed -e 's/hi/hello/' -e '/10/d' file.txt
 sed 's/this/there/' file.txt this command will not actually update the file while it will just perform operation on file and show that content , if you want to change the content actually then need to use "-i" option.
 
 sed -i 's/this/there/' file.txt
 if you want to take backup before writing to original file then : sed -i.bak 's/this/there/' file.txt
 this will create file.txt.bak named backup file efore performiing any operation.
 
 delete a line starting with hi and ending with hello.
 sed '/hi.*hello/d' file.txt

AWK :
find some pattern in file : awk '/this/{print $0}' file.txt
awk '{print $0}' file.txt this will print all the lines in file
print some message before printing content of file and at end of file content: awk 'BEGIN {print "FILE CONTENT"} {print $0} END {print "File ENDS"}' file.txt
search for pattern "is" in file : awk '/s is/{print $0}' file.txt
search for pattern ending with "st" : awk '/.st/{print $0}' file.txt
print lines containing Hi and hi :  awk '/[Hh]i/{print $0}'  file.txt
echo "Hi123Hi" | awk '/[A-Za-z]/'   // it will grep in the string for A-Z and a-z


[[:alpha:]]                            Pattern for any alphabetical character, either upper or lower case.
[[:alnum:]]                          Pattern for  0–9, A–Z, or a–z.
[[:blank:]]                            Pattern for space or Tab only.
[[:digit:]]                              Pattern for 0 to 9.
[[:lower:]]                            Pattern for a–z lower case only.
[[:print:]]                            Pattern for any printable character.
[[:space:]]                          Pattern for any whitespace character: space, Tab, NL, FF, VT, CR.
[[:upper:]]                          Pattern for A–Z upper case only.

awk '/[[:print:]]/' file.txt
echo "tessst" | awk '/tes*t/{print $0}'  // * denotes 0 or more occurances means tet , test, tesst as well
awk '/this.*test/{print $0}' file.txt // means there can be any no of occurnaces in between this and test
echo "sat" | awk '/s[ae]*t/{print $0}'  // this represents 0 or more occurances of "ae"

The question mark(?) means the previous character can exist once or none.
echo "test" | awk '/tes?t/{print $0}'  // it will check whether s occurs 0 or 1 time 

The plus sign(+)  means that the character before the plus sign should exist one or more times, but must exist once at least. 
echo "teest" | awk '/te+st/{print $0}'

Curly braces{} enable you to specify the number of existence for a pattern, it has two formats:
n: The regex appears exactly n times.
n,m: The regex appears at least n times, but no more than m times.

echo "test" | awk '/te{1}st/{print $0}' 
test

$ echo "tst" | awk '/te{1,2}st/{print $0}'

$ echo "test" | awk '/te{1,2}st/{print $0}'
test
$ echo "teest" | awk '/te{1,2}st/{print $0}'
teest
$ echo "teeest" | awk '/te{1,2}st/{print $0}'


cut -d" " -f 2 filename // for displaying 2nd column seperated by space
print lines starting with "vi"  :  awk '/^vi/{print}' filename
print lines endng with "kar:  awk '/kar$/{print}' filename    ( cat h | grep "re$")
print lines containing 0 to 9 numbers :  awk '/[0-9]/{print}' filename

mtime : ls -l : show the last update to file content, it does not udpate with change in permission or owner
atime : ls -lu : shows the last file accessed time 
ctime : ls -lc : it changes when u change the files ownership or access permission .

file creation time : 
1) find files inode number by following command :
ls -i file.txt
2)find partition name on which your filesystem is residing by df -hk command
df -hk  (for example /dev/sda1)
3) debugfs -R 'stat <inode number>' /dev/sda1




date -s "27 AUGUST 2018 15:44:00"  // set date 
set cron every 10 minutes : */10 * * * * command
at 11 Am nad 4 PM : 		00 11,16 * * * command 
from 9 AM to 6 PM : 		00 09-18 * * *
from 9 AM to 6 PM ( weekdays only)		: 00 09-18 * * 1-5
means every 2 minuts in first  10 minutes : 0-10/2 * * * *
@yearly  : 0 0 1 1 *
@daily   : 0 0 * * *
@hourly  : 0 * * * *
@reboot  runs at startup

write a shell script to monitor disk space usage :
{
df -hk | grep tmp > /tmp/vij/s
var=`cat /tmp/vij/s | awk '{ print $5 }'`
var1=`echo"${var::-1}"`
echo $var1
}  // this script is not completed still

remove blank line from file
cat filename | grep -v "^$" > temp_file

[ram2@atrcxb2957 t]$ cat t  //create 50 users 
#!/bin/bash

for i in ` cat ./a`; do
useradd $i;
done

[ram2@atrcxb2957 t]$ cat tt  // set password for 50 users
#!/bin/bash

for i in `cat ./a` ; do
echo "ram" | passwd --stdin $i; done
====================================
// script to perform passwordless ssh from 1 linux server to another
#!/bin/bash
username=<username>
server=<Server_IP/Server_Hostname>

ssh-keygen -t rsa 
if [ $? -ne 0 ]; then 
echo "Could not generate the Key"
exit
fi

ssh-copy-id  -i ~/.ssh/id_rsa.pub  $username@$server
if [ $? -ne 0 ]; then 
echo "Could not copy public id from client to server"
exit
fi
echo "Passwordless SSH configured successfully"


=====================================

create a file with some content with the help of cat command.
cat > hello
enter the content followd by CTRL + D

[root@system1 ~]# date -u
Sat Mar 23 17:39:05 UTC 2019
[root@system1 ~]# date -s "Sat Mar 23 23:08:08"
Sat Mar 23 23:08:08 IST 2019
[root@system1 ~]#  date +"%T"
23:10:46
[root@system1 ~]# date +%B
March
[root@system1 ~]# date +%d
23
[root@system1 ~]# date +%D
03/23/19
[root@system1 ~]# date +%b
Mar
[root@system1 ~]# date +%y
19
[root@system1 ~]# date +%Y
2019
[root@system1 ~]# date +%F
2019-03-23
[root@system1 ~]# date +%f
%f


1> redirects stdout to filename 
1>> appends stdout to filename
2> redirects stderr to filename
&> redirects both stderr and stdout to a filename


ls ? will show all the files with single character as name
ls ??? will show all the files with three characters as name

[root@system1 ~]# ls a[a-d]c
aac  abc  acc  adc

[root@system1 ~]# ls *[0-9]* // it will display all the files whose name contains at least 1 digit

ls test_[!9]*  // it will print all the files except test_9
if want to create a file with special character in their name then can use "\"

touch \\
touch \$
touch hello\ there
[root@system1 test]# ls
$  \  hello there
touch hello\\\ there
[root@system1 test]# ls
hello\ there


===============================

find command:
for ignoring the case 
find . -iname abc.txt

find all files in current working directory whose name is not abc.txt
find . -not -iname abc.txt

find all files with .cpp or .sh extension

find . -name "*.cpp"  -o -name "*.sh"

find file with extension as .sh and its name contain "track" word
find . -name "*.sh" -a -name "*track*"

find all the files whose name contain "abc" but extension is not .php
find . -name "*abc*" ! -name "*.php"

how to find a file in 2 paths
find / /eniq -type f -name abc.txt

how to find hidden files
find . -name ".*" -type f

find a file whose permision is not 777

find . -type f ! -perm 777

find files for which stiky bit is set
find / -type f -perm /u=s

find all files in which read permission is set to user
find . -type f -perm /u=r

find all  the files owned by john
find /home -user john -type f

find all files modified in last 10 days
find . -type f -mtime 10

find all files accessed in last 10 days
find . -type f -atime 10

find all files which are modified in last 10 to 100 days (files which are modified in last 9 days should be excluded)
find . -type f -mtime +10 -mtime -100

for minutes we use word mmin amin cmin
find all files whose size is 50MB
find . -type f -size 50M

find files size between 50 to 100 MB
find . -type f -size +50M -size -100M

find empty files
find . -type f -empty
find . -type f -size 0

find file with name abc.txt and delete that files
find . -type f -name "abc.txt" -exec rm -rf {} \;

find . -type f -name "abc.txt"  | xargs ls -l {} \;

while finding if you want to search the file only upto 2 directories 
find . -maxdepth 2 -name abc.txt


Grep :
variants of grep 
egrep : extended grep for regular expression
fgrep : fixed strings
rgrep : reversed grep

find vijay word in all files recursively
grep -r "vijay" *

show all the data in file except vijay in file
grep -riv "vijay" *
r: recursively
i: ignore case
v: excluded

count the "vijay" word in file
grep -c "vijay" filename.txt

find "vijay" and "rahul" in file.txt
find -E -w "vijay|rahul" file.txt

find exact word "vijay" in file (not vijaya or avijay)
find -iw "vijay" file.txt

find just file name which contain "vijay" word
grep -l "vijay" * | sort |  uniq

find vijay , ajay word in file
grep [via]jay file.txt 
it will search for every combination of "via" followd by "jay" i. e. vjay, ijay, ajay, viajay , vijay , iajay

find 4 digit pattern in file
grep "[0-9][0-9][0-9][0-9]" file.txt

show 3 more lines after "vijay"
grep -A 3 "vijay" file.txt

show 3 lines before "vijay"
grep -B 3 "vijay" file.txt 

grep -f user.txt /etc/passwd
it will iterate through user.txt and for every word it will search the /etc/passwd file and display the matched pattern
  
different ways of array declaration
1)
var[0]="Hello"
var[1]="vijay"
var[2]="dear"

2)
var=("The"  "rate" "is" 45 "kg")

3) 
var=([0]="hello" [1]="vijay" dear)

4)
echo "enter Ip addressed seperated by space"
read -a ip_list // with -a option we are accepting the input and saving in array

for i in ${ip_list[@]}
do
	echo $i
done


"here document" concept
we can give multiline comment in code with here document concept

echo "this will print"

<< COMMENT

echo "this will not print"
touch filename   // this will not execute
echp " again this will not execute"

COMMENT

echo "this will also print"
here we can use any word instead of COMMENT ,the end word should be at the begining of the line


perform copy operation with dd command
dd if=/tmp/test.sh  of=/var/tmp/new_test.sh bs=10240


cat /proc/cpuinfo is same lscpu


1) what is difference between softlink and hardlink

A symbolic or soft link is an actual link to the original file, whereas a hard link is a mirror copy of the original file. If you delete the original file, the soft link has no value, because it points to a non-existent file. But in the case of hard link, it is entirely opposite. Even if you delete the original file, the hard link will still has the data of the original file. Because hard link acts as a mirror copy of the original file.

In a nutshell, a soft link

can cross the file system,
allows you to link between directories,
has different inode number and file permissions than original file,
permissions will not be updated,
has only the path of the original file, not the contents.
A hard Link

can’t cross the file system boundaries (i.e. A hardlink can only work on the same filesystem),
can’t link directories,
has the same inode number and permissions of original file,
permissions will be updated if we change the permissions of source file,
has the actual contents of original file, so that you still can view the contents, even if the original file moved or removed.

